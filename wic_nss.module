<?php

/**
 * @file
 * Provides basic functions for the wic_nss module.
 */

/**
 * Implments hook_menu().
 */
function wic_nss_menu() {
  return array(
    'dashboard' => array(
      'title' => 'Your assessment dashboard',
      'page callback' => 'wic_nss_dashboard_page',
      'access arguments' => array('access assessment dashboard'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'wic_nss.pages.inc',
    ),
    'dashboard/%wic_nss_assessment' => array(
      'title' => 'Your assessment dashboard',
      'title callback' => 'wic_nss_dashboard_page_title',
      'title arguments' => array(1),
      'page callback' => 'wic_nss_dashboard_page',
      'page arguments' => array(1),
      'access arguments' => array('access assessment dashboard'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'wic_nss.pages.inc',
    ),
    'dashboard/%wic_nss_assessment/view' => array(
      'title' => 'View report',
      'page callback' => 'wic_nss_assessment_view_page',
      'page arguments' => array(1),
      'access arguments' => array('access assessment dashboard'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 0,
      'file' => 'wic_nss.pages.inc',
    ),
    'dashboard/%wic_nss_assessment/print' => array(
      'title' => 'Print PDF',
      'page callback' => 'wic_nss_assessment_print_pdf_page',
      'page arguments' => array(1),
      'access arguments' => array('access assessment dashboard'),
      'type' => MENU_LOCAL_TASK,
      'context' => MENU_CONTEXT_PAGE | MENU_CONTEXT_INLINE,
      'weight' => 1,
      'file' => 'wic_nss.print.inc',
    ),
    'admin/content/assessments' => array(
      'title' => 'Assessments',
      'description' => "Manage your site's assessments.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wic_nss_select_books'),
      'access arguments' => array('administer assessments'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'wic_nss.admin.inc',
    ),
    'admin/wic-nss' => array(
      'title' => 'WIC NSS',
      'description' => 'Administer the WIC NSS self-assessment application',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wic_nss_admin_page'),
      'access arguments' => array('administer assessments'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'wic_nss.admin.inc',
      'weight' => 10,
    ),
  );
}

/**
 * Menu loader callback: Verifies the bid is a valid assessment book node.
 *
 * @param int $bid
 *   The nid of the assessment book node.
 *
 * @return
 *   The book_link of the assessment book node.
 */
function wic_nss_assessment_load($bid) {
  // Verify the $bid is a valid assessment.
  if (!in_array($bid, variable_get('wic_nss_assessment_nids', array()))) {
    return drupal_not_found();
  }

  // Return the bid.
  return $bid;
}

/**
 * Implements hook_permission().
 *
 * @return array
 *   An associative array containing user permission data.
 */
function wic_nss_permission() {
  return array(
    'access assessment dashboard' => array(
      'title' => t('Access self-assessment dashboard'),
      'description' => t('Access the dashboard page and print submission reports.'),
    ),
    'administer assessments' => array(
      'title' => t('Administer assessments'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function wic_nss_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
      $instructions = variable_get('wic_nss_user_register_form_instructions', FALSE);
      if (!empty($instructions)) {
        $form['nss_instructions'] = array(
          '#markup' => '<p>' . t('@instructions', array('@instructions' => $instructions)) . '</p>',
          '#weight' => -15,
        );
      }
      break;
  }

  // Alter webforms to load the user's last submission as default values.
  if (strstr($form_id, 'webform_client_form_')) {
    global $user;
    $node = $form['#node'];
    // Load the submission.
    $submission = wic_nss_get_last_webform_submission($node->nid, $user->uid);
    if ($submission == FALSE) {
      return;
    }
    // Don't set 'webform_client_form_' as the callback or drupal_get_form() and
    // this function create a loop. Set a non-existant callback and let
    // wic_nss_forms() deal with setting the callback correctly.
    $form = !empty($node->webform['components']) ? drupal_get_form('wic_nss_client_form_' . $node->nid, $node, $submission) : '';
  }
}

/**
 * Implements hook_forms().
 *
 * Set the webform callbacks to the correct form handler.
 */
function wic_nss_forms($form_id) {
  $forms = array();
  if (strpos($form_id, 'wic_nss_client_form_') === 0) {
    $forms[$form_id]['callback'] = 'webform_client_form';
  }
  return $forms;
}

/**
 * Returns a user's last submission to the node's webform.
 *
 * @param int $nid
 *   The nid of the webform node.
 * @param int $uid
 *   The uid of the user.
 *
 * @return
 *   FALSE or the fully-loaded submission object.
 */
function wic_nss_get_last_webform_submission($nid, $uid) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');

  // Return if the user has not submitted this form previously.
  $count = webform_get_submission_count($nid, $uid);
  if ($count == 0) {
    return FALSE;
  }

  // Query for the sid of the last submission from this user.
  $result = db_query("SELECT sid FROM webform_submissions WHERE nid = :nid AND uid = :uid ORDER BY submitted DESC", array(':nid' => $nid, ':uid' => $uid))->fetchObject();
  // Load and return the submission.
  return webform_get_submission($nid, $result->sid);
}

/**
 * Implements hook_theme().
 */
function wic_nss_theme($existing, $type, $theme, $path) {
  return array(
    'menu_link__wic_nss_book_toc' => array(
      'render element' => 'element',
    ),
    'wic_nss_assessment_menu' => array(
      'variables' => array('elements' => array()),
      'template' => 'templates/wic_nss_assessment_menu',
      'file' => 'wic_nss.pages.inc',
    ),
    'wic_nss_assessment_view_page' => array(
      'variables' => array('bid' => NULL, 'content' => array(),),
      'template' => 'templates/wic_nss_assessment_view_page',
      'file' => 'wic_nss.pages.inc',
    ),
    'wic_nss_empty_report' => array(
      'variables' => array('bid' => NULL),
    ),
  );
}

/**
 * Processes variables for book-navigation.tpl.php.
 *
 * @param array $variables
 *   An associative array containing the following key:
 *   - book_link
 *
 * @see book-navigation.tpl.php
 */
function wic_nss_preprocess_book_navigation(&$variables) {
  $book_link = $variables['book_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['book_id'] = $book_link['bid'];
  $variables['book_title'] = check_plain($book_link['link_title']);
  $variables['book_url'] = 'node/' . $book_link['bid'];
  $variables['current_depth'] = $book_link['depth'];
  $variables['tree'] = '';

  if ($book_link['mlid']) {
    $variables['tree'] = wic_nss_book_children($book_link);

    if ($prev = book_prev($book_link)) {
      $prev_href = url($prev['href']);
      drupal_add_html_head_link(array('rel' => 'prev', 'href' => $prev_href));
      $variables['prev_url'] = $prev_href;
      $variables['prev_title'] = check_plain($prev['title']);
    }

    if ($book_link['plid'] && $parent = book_link_load($book_link['plid'])) {
      $parent_href = url($parent['href']);
      drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
      $variables['parent_url'] = $parent_href;
      $variables['parent_title'] = check_plain($parent['title']);
    }

    if ($next = book_next($book_link)) {
      $next_href = url($next['href']);
      drupal_add_html_head_link(array('rel' => 'next', 'href' => $next_href));
      $variables['next_url'] = $next_href;
      $variables['next_title'] = check_plain($next['title']);
    }
  }

  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}

/**
 * Formats the menu links for the child pages of the current page.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   HTML for the links to the child pages of the current page.
 */
function wic_nss_book_children($book_link) {
  $flat = book_get_flat_menu($book_link);

  $children = array();

  if ($book_link['has_children']) {
    // Walk through the array until we find the current page.
    do {
      $link = array_shift($flat);
    }
    while ($link && ($link['mlid'] != $book_link['mlid']));
    // Continue though the array and collect the links whose parent is this page.
    while (($link = array_shift($flat)) && $link['plid'] == $book_link['mlid']) {
      $data['link'] = $link;
      $data['below'] = '';
      $children[] = $data;
    }
  }

  if ($children) {
    $elements = menu_tree_output($children);
    // This is where this module's implementation differs from Book's.
    wic_nss_menu_links_add_webform_submission_status($elements);
    return drupal_render($elements);
  }
  return '';
}

/**
 * Appends the submission status of webforms to links in a menu.
 *
 * @param array $elements
 *   An array of menu links generated by menu_tree_output().
 *
 * @see menu_tree_output()
 */
function wic_nss_menu_links_add_webform_submission_status(&$elements = array()) {
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  global $user;
  // Don't show the submission status for anonymous users.
  if ($user->uid != 0) {
    foreach ($elements as $mlid => $element) {
      if (!is_numeric($mlid)) {
        continue;
      }
      // Check that the link is for a node.
      if (strtok($element['#href'], '/') == 'node') {
        $nid = (int) strtok('/');
        // Check that the node type is a webform.
        $node = node_load($nid);
        if ($node->type == 'webform') {
          // Pass the number of the current user's submissions to the link theme
          // function.
          $elements[$mlid]['#webform_is_submitted'] = webform_get_submission_count($nid, $user->uid);
          $elements[$mlid]['#theme'] = 'menu_link__wic_nss_book_toc';
        }
      }

      // Recursively check child arrays for webform links.
      if (!empty($elements[$mlid]['#below'])) {
        wic_nss_menu_links_add_webform_submission_status($elements[$mlid]['#below']);
      }
    }
  }
}

/**
 * Returns HTML for a menu link and submenu.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: Structured array data for a menu link.
 *
 * @ingroup themeable
 */
function theme_menu_link__wic_nss_book_toc(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  if (!empty($element['#webform_is_submitted'])) {
    $webform_status = ' <span class="wic-nss-complete">(Completed)</span>';
  }
  else {
    $webform_status = ' <span class="wic-nss-incomplete">(Not completed)</span>';
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $webform_status . $sub_menu . "</li>\n";
}

/**
 * Returns content for display from the assessment's nodes.
 *
 * @param int $bid
 *   The nid of the assessment's book node.
 *
 * @return array
 *   An array of content from nodes in the assessment.
 */
function _wic_nss_get_report_content($bid) {
  global $user;
  $content = array();

  // Get all nids in this assessment from the book's menu tree so nodes will be
  // displayed in the correct order.
  $node = node_load($bid);
  $tree = menu_tree_all_data($node->book['menu_name']);
  $nids = _wic_nss_get_flat_book_nodes($tree);
  $nodes = node_load_multiple($nids);

  foreach ($nodes as $nid => $node) {
    // Record the node's parent nid.
    $parent_nid = $node->book['plid'] ? $nids[$node->book['plid']] : 0;
    $content[$nid]['#parent_nid'] = $parent_nid;
    if ($node->book['has_children']) {
      // Create a flag indicating whether this node has submitted child webforms.
      $content[$nid]['#child_is_submitted'] = FALSE;
    }

    $content[$nid]['title'] = $node->title;
    $content[$nid]['body'] = $node->body['und'][0]['safe_value'];

    if ($node->type != 'webform') {
      continue;
    }
    // Load the user's most recent submission for this webform node.
    $submission = wic_nss_get_last_webform_submission($nid, $user->uid);
    if ($submission == FALSE) {
      // Don't display any webforms that aren't submitted and don't have child
      // nodes in the book.
      if (!$node->book['has_children']) {
        unset($content[$nid]);
      }
      continue;
    }
    // Render the html view of the submission.
    $content[$nid]['submission'] = webform_submission_render($node, $submission, NULL, 'html');

    // Set the parent's flag.
    if ($parent_nid) {
      $content[$parent_nid]['#child_is_submitted'] = TRUE;
    }
  }

  // Filter parent node content that has no submitted children.  Since the array
  // is in hierarchical order, walk through it in reverse and record childless
  // parents.  Don't unset them in this pass or the while statement won't set
  // the pointer correctly to the previous element.
  $unneeded_content = array();
  // Set the array pointer to the last element.
  end($content);
  do {
    $current = current($content);
    // Don't do anything if this node has no children.
    if (!isset($current['#child_is_submitted'])) {
      continue;
    }
    // Set this node's parent's flag if this has a submitted child.
    if ($current['#child_is_submitted'] && $current['#parent_nid']) {
      $content[$current['#parent_nid']]['#child_is_submitted'] = TRUE;
    }
    // Record this node if it has no submitted children and no submission.
    elseif (!$current['#child_is_submitted'] && !isset($content['submission'])) {
      $unneeded_content[] = key($content);
    }
  }
  // Move the array pointer to the previous element.
  while (prev($content));

  // Unset the childless node content.
  foreach ($unneeded_content as $nid) {
    unset($content[$nid]);
  }
  return $content;
}

/**
 * Returns a flat array of nids in the menu tree.
 *
 * @param array $tree
 *   A book's menu tree.
 *
 * @return array
 *   A flat array of nids in the menu tree keyed by mlid.
 */
function _wic_nss_get_flat_book_nodes($tree) {
  $nids = array();
  // Get the nid of every element in this level of the tree.
  foreach($tree as $menu_item) {
    $link_path = explode('/', $menu_item['link']['link_path']);
    $nids[$menu_item['link']['mlid']] = $link_path[1];

    // Get the nids of any child nodes.
    if (!empty($menu_item['below'])) {
      $nids += _wic_nss_get_flat_book_nodes($menu_item['below']);
    }
  }
  return $nids;
}

function theme_wic_nss_empty_report($variables) {
  $bid = $variables['bid'];
  return '<p>' . t("You haven't submitted any forms for this self-assessment yet.") . '</p>
    <p>' . l(t('Start filling out forms.'), 'node/' . $bid) . '</p>';
}
