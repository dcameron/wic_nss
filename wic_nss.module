<?php

/**
 * @file
 * Provides basic functions for the wic_nss module.
 */

/**
 * Implments hook_menu().
 */
function wic_nss_menu() {
  return array(
    // @todo Update print page.
    'assessments/%wic_nss_assessment/print' => array(
      'title' => 'Print',
      'page callback' => 'wic_nss_assessment_print_page',
      'page arguments' => array(1),
      'access arguments' => array('access assessments'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'wic_nss.pages.inc',
    ),
    'admin/content/webform-book' => array(
      'title' => 'Assessments',
      'description' => "Manage your site's assessments.",
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wic_nss_select_books'),
      'access arguments' => array('administer assessments'),
      'type' => MENU_LOCAL_TASK,
      'file' => 'wic_nss.admin.inc',
    ),
    'admin/wic-nss' => array(
      'title' => 'WIC NSS',
      'description' => 'Administer the WIC NSS self-assessment application',
      'page callback' => 'drupal_get_form',
      'page arguments' => array('wic_nss_admin_page'),
      'access arguments' => array('administer assessments'),
      'type' => MENU_NORMAL_ITEM,
      'file' => 'wic_nss.admin.inc',
      'weight' => 10,
    ),
  );
}

/**
 * Implements hook_permission().
 *
 * @return array
 *   An associative array containing user permission data.
 */
function wic_nss_permission() {
  return array(
    'access assessments' => array(
      'title' => t('Access self-assessments'),
      'description' => t('Create, edit, and delete self-assessments'),
    ),
    'administer assessments' => array(
      'title' => t('Administer assessments'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function wic_nss_form_alter(&$form, &$form_state, $form_id) {
  switch ($form_id) {
    case 'user_register_form':
      $instructions = variable_get('wic_nss_user_register_form_instructions', FALSE);
      if (!empty($instructions)) {
        $form['nss_instructions'] = array(
          '#markup' => '<p>' . t('@instructions', array('@instructions' => $instructions)) . '</p>',
          '#weight' => -15,
        );
      }
      break;
  }
}

/**
 * Implements hook_theme().
 */
function wic_nss_theme($existing, $type, $theme, $path) {
  return array(
    'menu_link__wic_nss_book_toc' => array(
      'render element' => 'element',
    ),
    'wic_nss_assessment_print_page' => array(
      'variables' => array('assessment' => NULL, 'nodes' => array(), 'submissions' => array(), 'rendered_submissions' => array()),
      'template' => 'templates/wic_nss_assessment_print_page',
      'file' => 'wic_nss.pages.inc',
    ),
  );
}

/**
 * Processes variables for book-navigation.tpl.php.
 *
 * @param array $variables
 *   An associative array containing the following key:
 *   - book_link
 *
 * @see book-navigation.tpl.php
 */
function wic_nss_preprocess_book_navigation(&$variables) {
  $book_link = $variables['book_link'];

  // Provide extra variables for themers. Not needed by default.
  $variables['book_id'] = $book_link['bid'];
  $variables['book_title'] = check_plain($book_link['link_title']);
  $variables['book_url'] = 'node/' . $book_link['bid'];
  $variables['current_depth'] = $book_link['depth'];
  $variables['tree'] = '';

  if ($book_link['mlid']) {
    $variables['tree'] = wic_nss_book_children($book_link);

    if ($prev = book_prev($book_link)) {
      $prev_href = url($prev['href']);
      drupal_add_html_head_link(array('rel' => 'prev', 'href' => $prev_href));
      $variables['prev_url'] = $prev_href;
      $variables['prev_title'] = check_plain($prev['title']);
    }

    if ($book_link['plid'] && $parent = book_link_load($book_link['plid'])) {
      $parent_href = url($parent['href']);
      drupal_add_html_head_link(array('rel' => 'up', 'href' => $parent_href));
      $variables['parent_url'] = $parent_href;
      $variables['parent_title'] = check_plain($parent['title']);
    }

    if ($next = book_next($book_link)) {
      $next_href = url($next['href']);
      drupal_add_html_head_link(array('rel' => 'next', 'href' => $next_href));
      $variables['next_url'] = $next_href;
      $variables['next_title'] = check_plain($next['title']);
    }
  }

  $variables['has_links'] = FALSE;
  // Link variables to filter for values and set state of the flag variable.
  $links = array('prev_url', 'prev_title', 'parent_url', 'parent_title', 'next_url', 'next_title');
  foreach ($links as $link) {
    if (isset($variables[$link])) {
      // Flag when there is a value.
      $variables['has_links'] = TRUE;
    }
    else {
      // Set empty to prevent notices.
      $variables[$link] = '';
    }
  }
}

/**
 * Formats the menu links for the child pages of the current page.
 *
 * @param $book_link
 *   A fully loaded menu link that is part of the book hierarchy.
 *
 * @return
 *   HTML for the links to the child pages of the current page.
 */
function wic_nss_book_children($book_link) {
  $flat = book_get_flat_menu($book_link);

  $children = array();

  if ($book_link['has_children']) {
    // Walk through the array until we find the current page.
    do {
      $link = array_shift($flat);
    }
    while ($link && ($link['mlid'] != $book_link['mlid']));
    // Continue though the array and collect the links whose parent is this page.
    while (($link = array_shift($flat)) && $link['plid'] == $book_link['mlid']) {
      $data['link'] = $link;
      $data['below'] = '';
      $children[] = $data;
    }
  }

  if ($children) {
    $elements = menu_tree_output($children);
    // This is where this module's implementation differs from Book's.
    module_load_include('inc', 'webform', 'includes/webform.submissions');
    global $user;
    foreach ($elements as $mlid => $element) {
      if (!is_numeric($mlid)) {
        continue;
      }
      // Check that the link is for a node.
      if (strtok($element['#href'], '/') != 'node') {
        continue;
      }
      $nid = (int) strtok('/');
      // Check that the node type is a webform.
      $node = node_load($nid);
      if ($node->type != 'webform') {
        continue;
      }
      // Pass the number of the current user's submissions to the link theme
      // function.
      $elements[$mlid]['#webform_is_submitted'] = webform_get_submission_count($nid, $user->uid);
      $elements[$mlid]['#theme'] = 'menu_link__wic_nss_book_toc';
    }
    //var_dump($elements);
    return drupal_render($elements);
  }
  return '';
}

/**
 * Returns HTML for a menu link and submenu.
 *
 * @param $variables
 *   An associative array containing:
 *   - element: Structured array data for a menu link.
 *
 * @ingroup themeable
 */
function theme_menu_link__wic_nss_book_toc(array $variables) {
  $element = $variables['element'];
  $sub_menu = '';

  if ($element['#below']) {
    $sub_menu = drupal_render($element['#below']);
  }
  if ($element['#webform_is_submitted']) {
    $webform_status = ' <span class="wic-nss-complete">(Completed)</span>';
  }
  else {
    $webform_status = ' <span class="wic-nss-incomplete">(Not completed)</span>';
  }
  $output = l($element['#title'], $element['#href'], $element['#localized_options']);
  return '<li' . drupal_attributes($element['#attributes']) . '>' . $output . $webform_status . $sub_menu . "</li>\n";
}
